import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Window {

	private JFrame frame;
	private WayPointCanvas canvas;

	private JPanel infoPanel, exportPanel;
	private JTextField xPos, yPos, command, selectedId, teamNum, fieldWidth, fieldHeight;
	private JCheckBox isParallel;
	private JButton applyButton, save, load;

	private Waypoint selected;

	public Window(Dimension size) {
		frame = new JFrame();
		frame.setSize(size);
		frame.setTitle("2854 Map");
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		frame.setResizable(false);

		exportPanel = new JPanel();
		exportPanel.setLayout(new GridLayout(1, 0));
		teamNum = new JTextField();
		fieldWidth = new JTextField();
		fieldHeight = new JTextField();
		save = new JButton();
		save.setText("Save");
		load = new JButton();
		load.setText("Load");

		exportPanel.add(new JLabel("team #:"));
		exportPanel.add(teamNum);
		exportPanel.add(new JLabel("Field Width (m)"));
		exportPanel.add(fieldWidth);
		exportPanel.add(new JLabel("Field Height (m)"));
		exportPanel.add(fieldHeight);
		exportPanel.add(save);
		exportPanel.add(load);

		frame.add(exportPanel, BorderLayout.PAGE_START);

		canvas = new WayPointCanvas(size);
		canvas.setSize(size);
		canvas.setVisible(true);
		canvas.setLayout(null);
		frame.add(canvas, BorderLayout.CENTER);
		frame.setVisible(true);

		infoPanel = new JPanel();
		xPos = new JTextField();
		yPos = new JTextField();
		command = new JTextField();
		isParallel = new JCheckBox();
		applyButton = new JButton();
		selectedId = new JTextField();
		selectedId.setEditable(false);
		applyButton.setText("Apply");

		GridLayout layout = new GridLayout(2, 0);
		layout.setVgap(5);
		layout.setHgap(5);
		infoPanel.setLayout(layout);
		infoPanel.add(new JLabel("Selected Id:"));
		infoPanel.add(selectedId);
		infoPanel.add(new JLabel("XPos:"));
		infoPanel.add(xPos);
		infoPanel.add(new JLabel("YPos:"));
		infoPanel.add(yPos);
		infoPanel.add(new JLabel("Command:"));
		infoPanel.add(command);
		infoPanel.add(new JLabel("is Parallel:"));
		infoPanel.add(isParallel);
		infoPanel.add(applyButton);
		infoPanel.validate();

		frame.add(infoPanel, BorderLayout.PAGE_END);

		applyButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				selected.setLocation(Integer.valueOf(xPos.getText()), Integer.valueOf(yPos.getText()));
				selected.setCommand(command.getText());
				selected.setParallel(isParallel.isSelected());

			}
		});

		save.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				// FileNameExtensionFilter filter = new FileNameExtensionFilter("A Map file
				// (generated by this app)", ".txt");
				// chooser.setFileFilter(filter);
				int option = chooser.showSaveDialog(null);
				if (option == JFileChooser.APPROVE_OPTION) {
					File f = chooser.getSelectedFile();
					FieldAuto auto = new FieldAuto(canvas.getPath(), Float.valueOf(fieldWidth.getText()),
							Float.valueOf(fieldHeight.getText()), Integer.valueOf(teamNum.getText()));
					try {
						if (!f.exists()) {
							f.createNewFile();
						}
						FileOutputStream fStream = new FileOutputStream(f);
						ObjectOutputStream oStream = new ObjectOutputStream(fStream);
						oStream.writeObject(auto);
						oStream.close();
					} catch (IOException e1) {
						e1.printStackTrace();
					}

				}
			}
		});

		load.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				// FileNameExtensionFilter filter = new FileNameExtensionFilter("A Map file
				// (generated by this app)", ".txt");
				// chooser.setFileFilter(filter);
				int option = chooser.showOpenDialog(null);
				if (option == JFileChooser.APPROVE_OPTION) {
					for (Component c : canvas.getComponents()) {
						canvas.remove(c);
					}
					File f = chooser.getSelectedFile();
					try {
						if (!f.exists()) {
							f.createNewFile();
						}
						FileInputStream fStream = new FileInputStream(f);
						ObjectInputStream oStream = new ObjectInputStream(fStream);
						FieldAuto auto = (FieldAuto) oStream.readObject();
						canvas.getPath().setPath(auto.getP().getPath());
						teamNum.setText(auto.getTeamNum() + "");
						fieldWidth.setText(auto.getFieldWidth() + "");
						fieldHeight.setText(auto.getFieldHeight() + "");

						for (Waypoint p : canvas.getPath().getPath()) {
							getCanvas().add(p);
							p.revalidate();
							p.repaint();
						}


						// window.getCanvas().revalidate();
						getCanvas().repaint();
					} catch (IOException e1) {
						e1.printStackTrace();
					} catch (ClassNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}
			}
		});

	}

	public JFrame getFrame() {
		return frame;
	}

	public WayPointCanvas getCanvas() {
		return canvas;
	}

	public void setSelected(Waypoint selected) {
		this.selected = selected;
		selectedId.setText(selected.getId() + "");
		xPos.setText(selected.getX() + "");
		yPos.setText(selected.getY() + "");
		command.setText(selected.getCommand());
		isParallel.setText(selected.isParallel() + "");

	}

}
